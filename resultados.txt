================
PARTE 1
================
Cambie el incio con 'start()' por 'run()'. ¿Cómo cambia la salida?, ¿Por qué?

R: Cambia en que el metodo 'start' crea un nuevo hilo y se ejecuta el metodo 'run' en el nuevo hilo. Mientras que solo ejecutando 'run' se ejecuta
el metodo en el hilo actual, por lo que es una salida secuencial con el metodo 'run', con el 'start' es una salida con orden arbitrario.

================================================================

================
PARTE 2
================
Sin paralelismo: 80s
Con paralelismo de 8 threads: 12s

================
PARTE 2.1
================
¿Cómo se podría modificar la implementación para minimizar el número de consultas en estos casos?, ¿Qué elemento nuevo traería esto al problema?
R: Se podria modificar por medio de mantener una cuenta global de la cantidad de casos encontrados en los que el host ha sido notificado en lista negra.
Esto traeria que cada hilo debe acceder al estado global cada vez antes de realizar una comprobacion para evitar desperdiciar ciclos de procesamiento,
sin embargo esto debe controlarse por medio de un acceso unico para escritura (en caso de encontrarse en la lista negra) y lectura multiple para comprobar
si ya deberian detenerse o seguir.

================================================================

================
PARTE 3
================

Comparacion de desempeño:

+-------------+-------------+-------------+
|Hilos        |Hilos Reales |Tiempo (s)   |
+-------------+-------------+-------------+
|1            |1            |87s          |
+-------------+-------------+-------------+
|8            |8            |10s          |
+-------------+-------------+-------------+
|16           |16           |5s           |
+-------------+-------------+-------------+
|50           |50           |1s           |
+-------------+-------------+-------------+
|100          |100          |0s           |
+-------------+-------------+-------------+
|200          |200          |0s           |
+-------------+-------------+-------------+
|500          |500          |0s           |
+-------------+-------------+-------------+
|1000         |1000         |0s           |
+-------------+-------------+-------------+
|2000         |2000         |0s           |
+-------------+-------------+-------------+
|3000         |3077         |0s           |
+-------------+-------------+-------------+
|6000         |6154         |0s           |
+-------------+-------------+-------------+
|12000        |13334        |0s           |
+-------------+-------------+-------------+
|24000        |26667        |1s           |
+-------------+-------------+-------------+

NOTA: La diferencia de hilos reales respecto a los deseados es debido a la división
justa de hilos para resolver las 80000 direcciones a verificar.

NOTA 2: El consumo de recursos de los hilos están visibles en el pantallazo 'recursos-durante-pruebas.png'.

1) ¿Por qué el mejor desempeño no se logra con los 500 hilos?, ¿Cómo se compara este desempeño cuando se usan 200?

R: Debido a que entre mas hilos se tengan donde la cantidad de hilos es mayor al numero de nucleos disponibles en 
el sistema operativo, ya que no se podra tener todos los hilos corriendo paralelamente, sino que varios tienen que
ir uno detras de otro, entonces se tiene que ciertos hilos tienen una asignacion determinada por el SO, pero en 
donde al haber demasiados hilos, muchos se veran negativamente afectados por la asignacion 'justa' del tiempo de 
computo.

2) ¿Cómo se comporta la solución usando tantos hilos de procesamiento como núcleos comparado con el resultado de usar el doble de éste?

R: Usando el doble de hilos que unidades de procesamiento mejora en aproximadamente 200%.

3) De acuerdo con lo anterior, si para este problema en lugar de 100 hilos en una sola CPU se pudiera usar 1 hilo en cada una de 100 máquinas hipotéticas, la ley de Amdahls se aplicaría mejor?. Si en lugar de esto se usaran c hilos en 100/c máquinas distribuidas (siendo c es el número de núcleos de dichas máquinas), se mejoraría?

R: La ley de Amdahls depende del parametro del mejoramiento teorico del desempeño, sin embargo, analizando la ecuacion de la ley, esta tiene a P en el dominio (0, 1), donde se puede observar
que la ecuacion tiene una asintota horizontal dependiente del valor de la fraccion de desempeño P, por lo es congruente.

Otro detalle respecto a la ley de Amdahls es que el valor de la fraccion de desempeño depende de el nivel de paralelismo que tiene la aplicacion que se va a correr, por lo que el principio
seguiria siendo el mismo si se corre en una CPU con multiples nucleos que varios computadores con un solo nucleo pero con la misma cantidad (Teoricamente).
